unit uFuncoesDB;

interface

uses
  Data.DB, Data.SqlExpr, Datasnap.DBClient, System.SysUtils, System.Classes;

  function PegarCodigoAutoIncrement(sTabela: string): Integer;
  function MascaraTelefone(Sender: TField; DisplayText: Boolean): string;
  function MascaraCnpjCpf(Sender: TField; DisplayText: Boolean): string;

  function ExportarConsultaCSV(oDados: TClientDataSet; sCaminho: string): Boolean;

implementation

uses
  udmPrincipal, MaskUtils;

function PegarCodigoAutoIncrement(sTabela: string): Integer;
var
  oDados: TSQLDataSet;
begin
  oDados := TSQLDataSet.Create(nil);
  oDados.SQLConnection := dmPrincipal.Conexao;
  try
    oDados.Close;
    oDados.CommandText := 'SELECT GEN_ID(GEN_' + sTabela + '_ID,0) AS ID FROM RDB$DATABASE';
    oDados.Open;

    Result := oDados.FieldByName('ID').AsInteger + 1;
  finally
    FreeAndNil(oDados);
  end;
end;


function MascaraTelefone(Sender: TField; DisplayText: Boolean): string;
const
  sFixo  = '(00)\ 0000\-0000;0;_';
  sCelular =  '(00)\ 00000\-0000;0;_';
var
  fMask: string;
begin
  if DisplayText then
  begin
    case Length(Sender.AsString) of
      10: fMask := sFixo;
      11: fMask := sCelular;
    else
      fMask := '';
    end;
    Result := FormatMaskText(fMask, Sender.AsString);
  end
  else
    Result := Sender.AsString;
end;

function MascaraCnpjCpf(Sender: TField; DisplayText: Boolean): string;
const
  sCPF  = '000\.000\.000\-00;0;_';
  sCNPj =  '00\.000\.000\/0000\-00;0;_';
var
  fMask: string;
begin
  if DisplayText then
  begin
    case Length(Sender.AsString) of
      11: fMask := sCPF;
      14: fMask := sCNPj;
    else
      fMask := '';
    end;
    Result := FormatMaskText(fMask, Sender.AsString);
  end
  else
    Result := Sender.AsString;
end;

function ExportarConsultaCSV(oDados: TClientDataSet; sCaminho: string): Boolean;
{var
  Stream: TFileStream;
  i: Integer;
  OutLine: string;
  sTemp: string;
  Delimitador: Char = ';';
begin
  Stream := TFileStream.Create(sCaminho, fmCreate);
  try
    while not oDados.Eof do
    begin
      OutLine := '';
      for i := 0 to oDados.FieldCount - 1 do
      begin
        sTemp := oDados.Fields[i].AsString;
        OutLine := OutLine + sTemp + Delimitador;
      end;
      SetLength(OutLine, Length(OutLine) - 1);
      Stream.Write(OutLine[1], Length(OutLine) * SizeOf(Char));
      Stream.Write(sLineBreak, Length(sLineBreak));
      oDados.Next;
    end;
  finally
    Stream.Free;
  end;  }
procedure SaveToCSV(DataSet: TDataSet; FileName: String);
const
  Delimiter: Char = ';'; // In order to be automatically recognized in Microsoft Excel use ";", not ","
  Enclosure: Char = '"';
var
  List: TStringList;
  S: String;
  I: Integer;
  function EscapeString(s: string): string;
  var
    i: Integer;
  begin
    Result := StringReplace(s,Enclosure,Enclosure+Enclosure,[rfReplaceAll]);
    if (Pos(Delimiter,s) > 0) OR (Pos(Enclosure,s) > 0) then  // Comment this line for enclosure in every fields
        Result := Enclosure+Result+Enclosure;
  end;
  procedure AddHeader;
  var
    I: Integer;
  begin
    S := '';
    for I := 0 to DataSet.FieldCount - 1 do begin
      if S > '' then
        S := S + Delimiter;
      S := S + EscapeString(DataSet.Fields[I].FieldName);
    end;
    List.Add(S);
  end;
  procedure AddRecord;
  var
    I: Integer;
  begin
    S := '';
    for I := 0 to DataSet.FieldCount - 1 do begin
      if S > '' then
        S := S + Delimiter;
      S := S + EscapeString(DataSet.Fields[I].AsString);
    end;
    List.Add(S);
  end;
begin
  List := TStringList.Create;
  try
    DataSet.DisableControls;
    DataSet.First;
    AddHeader;
    while not DataSet.Eof do begin
      AddRecord;
      DataSet.Next;
    end;
  finally
    List.SaveToFile(FileName);
    DataSet.First;
    DataSet.EnableControls;
    List.Free;
  end;

end;

end.
